{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","alert","prevState","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIe,SAASA,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EACdC,mBAAS,IADK,mBAC3CC,EAD2C,KAC/BC,EAD+B,KAYnD,OACI,uBAAMC,SARW,SAACC,GAElB,GADAA,EAAEC,iBACGJ,EAAWK,OAAOC,QAAS,EAAG,OAAOC,MAAM,4BAChDT,GAAe,SAAAU,GAAS,OAAMR,GAAN,mBAAqBQ,OAC7CP,EAAc,KAId,UACI,uBACIQ,KAAK,OACLC,MAAQV,EACRW,SAfc,SAACR,GACvBF,EAAcE,EAAES,OAAOF,UAgBnB,gD,mCCvBCG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAI,UACnB,4BAAIN,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAc,IAAD,EACbf,mBAAS,CAC/BsB,KAAK,GACLa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAevC,OAVAC,qBAAW,WACPxB,EAASC,GACRwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGnB,CAACpB,IAEIqB,EDZyBK,CAAc1B,GAAjCa,EADwB,EAC7BN,KAAYa,EADiB,EACjBA,QACpB,OACI,qCACI,6BAAMpB,IACJoB,GAAW,wCACb,qBAAKJ,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAEC,GAAF,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aER5BgB,EAAe,WAAK,MAEO1C,mBAAS,CAAE,cAFlB,mBAEtB2C,EAFsB,KAEV5C,EAFU,KAK7B,OACI,qCACI,8CACA,cAACD,EAAD,CAAaC,cAAgBA,IAC7B,uBACA,6BAEY4C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCftC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.76ea38da.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport default function AddCategory({ setCategories }) {\n    const [ inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if ( inputValue.trim().length <=0 )return alert(' Insertar una Categoria ');\n        setCategories( prevState => [ inputValue, ...prevState ] );\n        setInputValue('');\n    }\n\n    return (\n        <form onSubmit= { handleSubmit }>\n            <input\n                type='text'\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n            <button>Agregar</button>\n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=zXckZECYoS9qoT1aSUWB4RtTZrDNImck`\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map ( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        }\n    });\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { title, url } ) => {\n\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt='title'/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n    const { data:images,loading } = useFetchGifs( category );\n    return (\n        <>\n            <h3>{ category }</h3>\n            { loading && <p>loading</p>}\n            <div className=\"card-grid\">\n                    {\n                        images.map( ( img ) => \n                            <GifGridItem \n                                key={img.id} \n                                {...img}\n                            />\n                        )\n                    }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState }from 'react'\nimport { getGifs} from '../components/helpers/getGifs';\nexport const useFetchGifs = ( category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    });\n    useEffect( () =>{\n        getGifs( category )\n        .then(imgs => {\n            setState({\n                data: imgs,\n                loading: false,\n            });\n        });\n    },[category]); \n\n    return state;\n}\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\n\nexport const GifExpertApp = () =>{\n    // const categories = [ 'One Punch', 'Hunter x Hunter', 'OnePiece' ];\n    const [categories, setCategories] = useState([ 'One Punch']);\n    // const listCategories = categories.map(( categorie ) => <li key={categorie}>{ categorie } </li> )\n    \n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            <ol>\n                    {\n                        categories.map(category => (\n                            <GifGrid \n                                key={ category }\n                                category={ category }\n                            />\n                        ))\n                    }\n            </ol> \n        </>\n    );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GiftExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}